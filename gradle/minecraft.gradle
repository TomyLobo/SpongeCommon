// Shared Gradle configuration for the Sponge ForgeGradle projects

ext.api = common.project('SpongeAPI')

// Apply shared Gradle configuration in SpongeAPI
apply from: api.file('gradle/sponge.gradle')

// Finish configuring SpongeAPI first
evaluationDependsOn api.path

minecraft {
    mappings = 'snapshot_20160109'
    runDir = 'run'

    atSource sourceSets.main
}

// Mixins
sourceSets {
    main {
        refMap = "mixins.${implementation.toLowerCase()}.refmap.json"
    }
}

// Compile options
compileJava {
    options.compilerArgs += '-Xlint:-processing'
}

// ForgeGradle 2 fails to apply transformer rules for classes it doesn't know of by default
// We use the access transformer to make the catalogs in the API accessible
deobfMcMCP { failOnAtError = false }
deobfMcSRG { failOnAtError = false }

// The access transformers we use
ext.ats = ['common_at.cfg']

// Set manifest entries
jar {
    manifest {
        attributes(
                'Specification-Title': api.name,
                'Specification-Version': api.version,
                'Specification-Vendor': api.url
        )
    }

    // Append API revision to the SpongeAPI version
    dependsOn common.resolveApiRevision
    doFirst {
        manifest {
            attributes('Specification-Version': common.apiVersion)
        }
    }

    afterEvaluate {
        manifest {
            attributes('FMLAT': project.ats.join(' '))
        }
    }
}

// Don't upload temp jar to Maven repository
configurations.archives.artifacts.removeAll { it.archiveTask.is jar }

// Reobfuscate to SRG mappings
reobf.jar.mappingType = 'SEARGE'

sourceJar {
    // Include SpongeAPI sources in source jar
    from api.sourceSets.main.allSource
}

artifacts {
    // Upload source jar to Maven repository
    archives sourceJar
}

// Dev jar
task devJar(type: Jar, dependsOn: [reobfJar]) {
    classifier = 'dev'
    manifest.from jar.manifest

    // Include API
    from api.sourceSets.main.output

    afterEvaluate {
        from zipTree(reobfJar.jar)
    }
}

// TODO: Remove once we have proper support for FG's dependency deobfuscation
// https://github.com/SpongePowered/Mixin/issues/91
devJar.doFirst {
    jar.refMaps.each {
        exclude it.name
    }
}

artifacts {
    // Upload dev jar to Maven repository
    archives devJar
}

// Include SpongeAPI/SpongeCommon dependencies in our POM
// Note: This is ugly, don't take a look at it; just keep scrolling
uploadArchives.repositories.mavenDeployer.pom.whenConfigured {
    dependencies.removeAll { it.artifactId == shadedDevProject.archivesBaseName }
    def deps = new HashSet(dependencies.collect { it.groupId + ':' + it.artifactId })
    dependencies.addAll(shadedDevProject.uploadArchives.repositories.mavenDeployer.pom.effectivePom.dependencies.findAll {
        !deps.contains(it.groupId + ':' + it.artifactId) // Don't add the same dependency several times to the POM
    })
}

// Java 6 source set for compatibility checking
sourceSets {
    java6 {
        compileClasspath += main.compileClasspath + main.output
    }
}

jar {
    // Include java6 classes in jar
    from sourceSets.java6.output
}

compileJava6Java {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}

// SpongeGradle for access transformer sorting
apply plugin: 'org.spongepowered.gradle'

sortAccessTransformers {
    add sourceSets.main
}

// Use checkstyle suppressions from Common
checkstyle {
    configProperties['suppressions'] = common.file('checkstyle-suppressions.xml')
}

license {
    ext.name = 'Sponge'
}
